import Anthropic from '@anthropic-ai/sdk'
import { v4 as uuidv4 } from 'uuid'
import { serve } from "bun";

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY
})

async function isUrlAccessible(url) {
  try {
    const response = await fetch(url);
    return response.ok;
  } catch {
    return false;
  }
}

async function fetchUrlContent(url) {
  try {
    // Skip fetching for media files
    if (url.match(/\.(jpg|jpeg|png|gif|mp4|mov|avi|webm|mkv)$/i)) {
      return `[Media file: ${url}]`;
    }
    
    const response = await fetch(url);
    if (!response.ok) return null;
    const text = await response.text();
    // Reduce to 5k characters to keep total tokens lower
    if (text.length > 5000) {
      const truncated = text.substring(0, 5000);
      const lastNewline = truncated.lastIndexOf('\n');
      const breakPoint = lastNewline > 0 ? lastNewline : 5000;
      return truncated.substring(0, breakPoint) + '\n[Content truncated...]';
    }
    return text;
  } catch {
    return null;
  }
}

async function analyzeHackathonProject(repoUrl, demoUrl, readmeUrl) {
  // Pre-validate URLs and fetch content
  const [repoAccessible, demoAccessible, readmeAccessible] = await Promise.all([
    isUrlAccessible(repoUrl),
    isUrlAccessible(demoUrl),
    isUrlAccessible(readmeUrl)
  ]);

  if (!repoAccessible || !demoAccessible || !readmeAccessible) {
    return {
      name: "Unknown",
      description: "URLs inaccessible",
      readme_url: readmeUrl,
      counts_for_ysws: false,
      ysws_reasoning: "One or more URLs are inaccessible",
      demo_url_type: "inaccessible",
      release_link: null,
      release_type: "none",
      readme_template: "none",
      is_fork: false
    };
  }

  // Fetch content from URLs
  const [readmeContent, repoContent] = await Promise.all([
    fetchUrlContent(readmeUrl),
    fetchUrlContent(repoUrl)
  ]);

  const response = await anthropic.messages.create({
    model: 'claude-3-opus-20240229',
    max_tokens: 4096,
    messages: [
      {
        role: 'user',
        content: `Analyze this project:

URLs:
${repoUrl}
${demoUrl}
${readmeUrl}

Extract the following in JSON format:
- name: the project's name
- description: Project summarized description
- readme_url: ${readmeUrl}
- counts_for_ysws: A true or false judgement of whether the project counts for YSWS
- ysws_reasoning: A short explanation of why the project counts for YSWS
- demo_url_type: justified_video | video | direct_link | inaccessible | other
- release_link: link to the project's release page (if there is one)
- release_type: executable | source | none (if there is a release page, and if it has a download link for a binary/iso/apk/etc.)
- readme_template: generic | nontemplated | none (if the readme is generated for a different project ie. create react app's readme is generic and not specific to the project. use none if there is no readme)
- is_fork: true | false (if the project is a fork of another project)

To decide if a project counts for YSWS, consider the following examples:
- A VIDEO DEMO DOES NOT INDICATE A WORKING PROJECT. Default to false.
- most projects with a direct link (ie website, app, etc.) count for YSWS
- a screenshot of the project does not count for YSWS
- most projects with a video or image demo do not count for YSWSâ€“ a demo should be experiential, not just seeing a video or image of the project
- most projects with a video demo that is just a walkthrough of the code do not count for YSWS
- most projects that are a python script do not count for YSWS, unless they have a direct link
- published packages count for YSWS (ie. npm packages, python packages, etc.)
- forks can count for YSWS if they are significantly different from the original project
- projects that are just a readme with no code do not count for YSWS
- a video demo is justified if it's a demo of a physical device, robot, pcb, etc. that can't be uploaded as a live link
- languages that don't build to the web (ie. c, c++, c#, java, etc.) can have a video demo as long as they include a release or executable
- the project's demo is a video, but they include a direct link in the README

Return results in clean JSON format. Do not include any other text or comments.

README:
\`\`\`
${readmeContent || 'Unable to fetch README content'}
\`\`\`

Repository HTML:
\`\`\`
${repoContent || 'Unable to fetch repository content'}
\`\`\`

`
      }
    ]
  });

  try {
    return JSON.parse(response.content[0].text);
  } catch (e) {
    console.error(e);
    return {
      name: "Unknown",
      description: "AI inference error",
      readme_url: readmeUrl,
      counts_for_ysws: false,
      ysws_reasoning: "AI inference error",
      demo_url_type: "inaccessible",
      release_link: null,
      release_type: "none",
      readme_template: "none",
      is_fork: false
    };
  }
}

const server = serve({
  port: 3000,
  async fetch(req) {
    // Only handle POST requests to /analyze
    if (req.method !== "POST" || new URL(req.url).pathname !== "/analyze") {
      return new Response("Not Found", { status: 404 });
    }

    try {
      const body = await req.json();
      
      // Check if all required parameters are present
      if (!body.repoUrl || !body.demoUrl || !body.readmeUrl) {
        return new Response(JSON.stringify({
          ysws_decision: false,
          ysws_reasoning: "Missing required parameters. Please provide repoUrl, demoUrl, and readmeUrl"
        }), {
          status: 400,
          headers: { "Content-Type": "application/json" }
        });
      }

      const fullResult = await analyzeHackathonProject(
        body.repoUrl,
        body.demoUrl,
        body.readmeUrl
      );

      // Extract just the fields we want
      const simplifiedResponse = {
        ysws_decision: fullResult.counts_for_ysws,
        ysws_reasoning: fullResult.ysws_reasoning
      };

      return new Response(JSON.stringify(simplifiedResponse), {
        headers: { "Content-Type": "application/json" }
      });

    } catch (error) {
      console.error("Error processing request:", error);
      return new Response(JSON.stringify({
        ysws_decision: false,
        ysws_reasoning: "Internal server error: " + error.message
      }), {
        status: 500,
        headers: { "Content-Type": "application/json" }
      });
    }
  }
});

console.log("Server running at http://localhost:3000");

// Comment out the main() call since we're using the server now
// main().catch(console.error)